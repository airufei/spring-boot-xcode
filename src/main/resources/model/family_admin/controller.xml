<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>service</name>
    <filePath>src/${packageName}/${javaModuleName}/controller</filePath>
    <fileName>${ClassName}Controller.java</fileName>
    <content><![CDATA[

package ${packageName}.${javaModuleName}.controller;


import java.util.List;
import lombok.extern.slf4j.Slf4j;
import ${packageName}.common.Partion;
import ${packageName}.util.StringUtil;
import ${packageName}.util.UserOperatorAuthCheckUtil;
import ${packageName}.common.RetData;
import com.alibaba.fastjson.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.stereotype.Controller;
import ${packageName}.${javaModuleName}.entity.${ClassName};
import ${packageName}.${javaModuleName}.request.${ClassName}Requst;
import ${packageName}.${javaModuleName}.service.${ClassName}Service;
/**
 * ${ClassName}Service(${functionName})
 * @author ${functionAuthor}
 * service 层的异常应该统一捕获进行处理，这样业务代码更加清晰
 * @version ${functionVersion}
 */
@Controller
@RequestMapping("/fm/${subModuleName}")
@Slf4j
public class ${ClassName}Controller  {

	@Autowired
	private ${ClassName}Service ${className}Service;

    @RequestMapping
    public String index() {
         return "${modulePageName}/${className}-index";
    }
      /**
	   * getList(获取${functionName}带分页数据-服务)
       * @author ${functionAuthor}
       * @param ${className}Requst 请求参数
       * @return Partion<${ClassName}Vo>
	   */
	   @RequestMapping("getList")
	   @ResponseBody
	   public JSONObject  getList(${ClassName}Requst ${className}Requst)
	   {
	      log.info("getList(获取${functionName}带分页数据) 开始 Requst={}", ${className}Requst);
	       JSONObject retJon = new JSONObject();
          if(${className}Requst==null)
          {
             return null;
          }
           Partion pt = ${className}Service.getList(${className}Requst);
            List<${ClassName}> list = null;
            int totalCount = 0;
            //long totalCount = 0;
            if (pt != null) {
                list = (List<${ClassName}>) pt.getList();
                totalCount = pt.getTotalCount();
            }
            retJon.put("data", list);
            retJon.put("recordsTotal", totalCount);
            retJon.put("recordsFiltered", totalCount);
            log.info("getList:(获取${functionName}分页查询接口) 结束");
           return retJon;
	   }

	 /**
     * saveOrUpdate (保存或者更新${functionName} 数据-服务)
     * @param ${className} 保存参数
     * @author ${functionAuthor}
     * @return RetData
     */
    @RequestMapping("saveOrUpdate")
    @ResponseBody
    public RetData<${ClassName}> saveOrUpdate(HttpServletRequest request,${ClassName} ${className}){
        RetData<${ClassName}> retData = RetData.fail();
        log.info("save (保存${functionName} server-服务) 开始 ${className}={}", ${className});
        if (${className} == null) {
            return retData;
        }
        User user = (User)request.getSession().getAttribute("user");
        if(user==null)
        {
            return RetData.fail("获取用户信息失败");
        }
        Long userId=user.getId();
        String roleCode=user.getRoleCode();
        Long id=${className}.getId();
        try {
             ${className}.setOperatorId(userId);
             ${className}.setOperatorName(user.getUsername());
             ${className}.setRoleCode(roleCode);
             ${className}= ${className}Service.saveOrUpdateData(${className});
        } catch (Exception e) {
            log.error(StringUtil.getExceptionMsg(e));
            retData = RetData.fail("保持数据失败，请稍后");
        }
        if (${className} != null) {
            ${className}.setId(${className}.getId());
            retData = RetData.success(${className});
        }
        log.info("save (保存${functionName}) 结束");
        return retData;
    }


	   /**
	   * get${ClassName}(获取${functionName}单条数据)
	   * @author ${functionAuthor}
	   * @param ${className}Requst 请求参数
	   * @return RetData
	   */
	   @RequestMapping("get${ClassName}")
	   @ResponseBody
	   public RetData<${ClassName}>  get${ClassName}(${ClassName}Requst ${className}Requst)
	   {
	       RetData<${ClassName}> retData = RetData.fail();
           log.info("get${ClassName}(获取${functionName}) 开始 parms={}", ${className}Requst);
           if(${className}Requst==null)
           {
             return retData;
           }
	       ${ClassName} ${className}= ${className}Service.get${ClassName}(${className}Requst);
	       retData=RetData.success(${className});
	       return retData;
	   }


	  /**
	  * 根据ID获取单条数据
	  * @param id 主键ID
	  * @return RetData
	  */
	  @RequestMapping("get${ClassName}ById")
	  @ResponseBody
	 public RetData<${ClassName}> get${ClassName}ById (long id){
	   RetData<${ClassName}> retData = RetData.fail();
	   log.info("get${ClassName}ById(获取${functionName}) 开始 id={}", id);
	   if(id<0)
        {
            return retData;
        }
	    ${ClassName} ${className}= ${className}Service.get${ClassName}ById(id);
	    retData=RetData.success(${className});
	    return retData;
	  }

    /**
	 * delete(逻辑删除${functionName}数据)
	 * @param id 主键Id
	 * @author ${functionAuthor}
	 * @return RetData
	 */
     @RequestMapping("delete")
     @ResponseBody
	 public RetData<String> delete(Long id)
	 {
	    RetData<String> retData = RetData.fail();
	    log.info("delete(逻辑删除${functionName}) 开始 id={}", id);
        boolean isSuccess = false;
        if (id==null||id<0) {
             retData = RetData.fail("参数错误");
            return retData;
        }
        try {
	      isSuccess =${className}Service.removeById(id);
	     } catch (Exception e) {
            log.error(StringUtil.getExceptionMsg(e));
            retData = RetData.fail("保持数据失败，请稍后");
        }
	    if (isSuccess) {
            retData = RetData.success();
        }
        log.info("delete(逻辑删除${functionName})结束 id={},retData={}", id, retData);
        return retData;
	 }
}]]>
    </content>
</template>