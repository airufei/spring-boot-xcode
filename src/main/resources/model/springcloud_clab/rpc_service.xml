<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/${packageName}/rpc/${javaModuleName}/service</filePath>
	<fileName>${ClassName}Service.java</fileName>
	<content><![CDATA[

package ${packageName}.rpc.${javaModuleName}.service;
import java.util.List;
import java.util.Map;
import ${packageName}.entity.${ClassName};
import ${packageName}.request.${javaModuleName}.${ClassName}Requst;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import com.alibaba.fastjson.JSONObject;
import ${packageName}.common.model.Partion;
/**
 * Service(${functionName})
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@SuppressWarnings("all")
@FeignClient(value=B_TRADE,fallback = ${ClassName}Fallback.class,path ="/server/${subModuleName}")
public interface ${ClassName}Service  {

    /**
     * list:(查询${functionName} 带分页数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "getList", consumes = MediaType.APPLICATION_JSON_VALUE)
    Partion getList(@RequestBody JSONObject map);

    /**
     * get${ClassName}List:(查询${functionName} 不带分页数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "get${ClassName}List", consumes = MediaType.APPLICATION_JSON_VALUE)
    List<${ClassName}> get${ClassName}List(@RequestBody ${ClassName}Requst ${className}Requst);

     /**
     * get${ClassName}:(查询${functionName}单个实体数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "get${ClassName}", consumes = MediaType.APPLICATION_JSON_VALUE)
    ${ClassName} get${ClassName}(@RequestBody ${ClassName}Requst ${className}Requst);

    /**
     * save:(保存${functionName}数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "save", consumes = MediaType.APPLICATION_JSON_VALUE)
    ${ClassName} save(@RequestBody ${ClassName} ${className});


    /**
     * delete:(删除${functionName}数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "delete", consumes = MediaType.APPLICATION_JSON_VALUE)
    boolean delete(@RequestParam("id") String id);
	
}]]>
	</content>
</template>