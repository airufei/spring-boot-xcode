<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>controller</name>
    <filePath>src/${packageName}/job/admin/${javaModuleName}/controller</filePath>
    <fileName>${ClassName}Controller.java</fileName>
    <content><![CDATA[
package ${packageName}.${subPackageName}.${javaModuleName}.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ResponseBody;
import javax.servlet.http.HttpServletRequest;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import ${packageName}.${subPackageName}.${javaModuleName}.model.*;
import ${packageName}.${subPackageName}.common.CommonService;
import ${packageName}.${subPackageName}.${javaModuleName}.rpc.*;
import ${packageName}.base.model.Partion;
import ${packageName}.job.core.biz.model.ReturnT;
/**
 * ${ClassName}Controller(${functionName})
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping("/${className}")
@SuppressWarnings("all")
public class ${ClassName}Controller {

    private static Logger logger = LoggerFactory.getLogger(${ClassName}Controller.class);
	@Autowired
	private ${ClassName}Service ${className}Service;
	@Autowired
    private CommonService commonService;

    @RequestMapping
    public String index() {
        return "${modulePageName}/${className}-index";
    }
	/**
	 * getList:(获取${functionName}分页查询接口)
	 * @Author ${functionAuthor}
	 * @param request
	 * @return
	 */
	@RequestMapping("pageList")
	 @ResponseBody
	public JSONObject getList(HttpServletRequest request){
		JSONObject retJon = new JSONObject();
		JSONObject param =null;
	   try {
            String startStr = request.getParameter("start");
            String length = request.getParameter("length");
             <#list colList as c><#if (c.isQuery?? && c.isQuery == "1")>
                String ${c.javaFieldId} = request.getParameter("${c.javaFieldId}");
              </#if>
			 </#list>
            int pageSize = 10;
            int pageNo = 1;
            int start=0;
            if (StringUtil.isNotBlank(startStr)) {
                start = StringUtil.stringToInt(startStr);
            }
            if (StringUtil.isNotBlank(length)) {
                pageSize = StringUtil.stringToInt(length);
            }
            if(start>0)
            {
                pageNo=(start/pageSize)+1;
            }
            param = StringUtil.getPageJSONObject(pageNo, pageSize);
            logger.info("getList:(获取${functionName}分页查询接口) 开始  param={}", param);
            <#list colList as c><#if (c.isQuery?? && c.isQuery == "1")>
             param.put("${c.javaFieldId}",${c.javaFieldId});
             </#if>
			 </#list>
            Partion pt = ${className}Service.getList(param);
            List<${ClassName}> list = null;
            int totalCount = 0;
            //long totalCount = 0;
            if (pt != null) {
                list = (List<${ClassName}>) pt.getList();
                totalCount = pt.getTotalCount();
            }
            retJon.put("data", list);
            retJon.put("recordsTotal", totalCount);
            retJon.put("recordsFiltered", totalCount);
        } catch (Exception e) {
            String msg="getList:(获取${functionName}分页查询接口) 异常====>"+ StringUtil.getExceptionMsg(e);
            logger.error(msg);
            commonService.sendDingMessage("getList", param.toString(), JSON.toJSONString(retJon), msg, this.getClass());

        }
        logger.info("getList:(获取${functionName}分页查询接口) 结束");
        return retJon;
	}

	/**
	 * delete:(逻辑删除${functionName}数据接口)
	 * @Author ${functionAuthor}
     * @param request
     * @param parms
     * @return
	 */
	@RequestMapping("delete")
	 @ResponseBody
	public ReturnT<String> delete(HttpServletRequest request){
	 ReturnT<String> returnT = new ReturnT<>(ReturnT.FAIL_CODE, "删除失败");
	  String ids =null;
        try {
            ids = request.getParameter("id");
            int id = StringUtil.stringToInt(ids);
            logger.info("delete 开始============>"+ id);
            if(id<=0)
            {
                returnT.setMsg("参数错误");
                return returnT;
            }
            long newId=id;
            boolean ret = ${className}Service.delete(newId);
            if(ret)
            {
                returnT.setCode(ReturnT.SUCCESS_CODE);
                returnT.setMsg("成功");
            }
        } catch (Exception e) {

            returnT=returnT.FAIL;
            String msg="delete:(逻辑删除${functionName}数据接口) error===>" + StringUtil.getExceptionMsg(e);
            logger.error(msg);
            commonService.sendDingMessage("delete", ids, null, msg, this.getClass());
        }
        logger.info("delete 结束============>"+ JSON.toJSONString(returnT));
        return returnT;
	}
	
	/**
	 * save:(保存${functionName}数据接口)
	 * @Author ${functionAuthor}
     * @param request
     * @param parms
     * @return
	 */
	@RequestMapping(value = "save")
	 @ResponseBody
    public  ReturnT<String> save(${ClassName} ${className}) {
		 ReturnT<String> returnT = new ReturnT<>(ReturnT.FAIL_CODE, "保存数据失败");
		String parms=null;
        try {
            parms=JSON.toJSONString(${className});
            logger.info("save:(保存${functionName}数据接口) 开始  parms={}", parms);
            if (${className} == null) {
                returnT.setMsg("参数为空");
                return returnT;
            }
            if(${className}==null)
            {
                returnT.setMsg("参数错误");
                return returnT;
            }
            ${ClassName} ret = ${className}Service.save(${className});
            if(ret==null)
            {
                returnT.setMsg("保存数据失败");
                return returnT;
            }
            returnT.setCode(ReturnT.SUCCESS_CODE);
            returnT.setMsg("成功");
        } catch (Exception e) {

            String msg="save:(保存${functionName}数据接口) error===>" + StringUtil.getExceptionMsg(e);
            logger.error(msg);
            commonService.sendDingMessage("save", parms, JSON.toJSONString(returnT), msg, this.getClass());
             returnT.setMsg("服务器繁忙，请稍后再试");
        }
       logger.info("save 结束============>"+ JSON.toJSONString(returnT));
        return returnT;
	}

}]]>
    </content>
</template>